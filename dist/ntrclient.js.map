{"version":3,"sources":["../src/ntrclient.js"],"names":["prototype","pullAsync","promisify","pull","NtrClient","constructor","options","seqNumber","canSendHeartbeat","promises","sock","port","ip","setNoDelay","setKeepAlive","heartbeatId","setInterval","heartbeat","bind","connectedCallback","disconnectedCallback","on","stream","pipe","handleData","disconnect","clearInterval","end","connectNTR","resolve","reject","connected","client","args","Error","cmdBuf","magic","readUInt32LE","seq","cmd","dataLen","data","handlePacket","undefined","e","type","lines","toString","match","handleProcesses","handleThreads","handleMemlayout","handleHandles","handleHello","handleReadMemoryText","handleReadMemoryData","length","processes","slice","map","proc","m","console","log","pid","parseInt","name","tid","kpobj","res","threads","recommendedPc","recommendedLr","i","startsWith","Number","isNaN","pc","lr","split","dataBuf","Buffer","alloc","j","val","writeUInt32LE","push","test","regions","region","start","size","handles","handle","h","p","join","sendPacket","buf","Math","min","write","saveFile","nameBuffer","byetLength","reload","hello","writeMemory","addr","byteLength","readMemory","addBreakpoint","disBreakpoint","id","enaBreakpoint","resume","listProcesses","listThreads","attachToProcess","patchAddr","queryHandle","getMemlayout"],"mappings":"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","file":"ntrclient.js","sourcesContent":["import {\n  connect,\n} from 'net';\nimport PullStream from 'pullstream';\nimport Promise from 'bluebird';\n\nPullStream.prototype.pullAsync = Promise.promisify(PullStream.prototype.pull);\n\nexport default class NtrClient {\n  constructor(options) {\n    this.seqNumber = 1000;\n    this.canSendHeartbeat = true;\n    this.promises = {};\n    this.sock = connect(options.port, options.ip, () => {\n      this.sock.setNoDelay(true);\n      this.sock.setKeepAlive(true);\n\n      this.heartbeatId = setInterval(this.heartbeat.bind(this), 1000);\n    });\n\n    if (typeof options.connectedCallback === 'function') {\n      this.connectedCallback = options.connectedCallback;\n    }\n\n    if (typeof options.disconnectedCallback === 'function') {\n      this.sock.on('close', options.disconnectedCallback);\n    }\n    this.sock.on('end', () => {});\n\n    this.stream = new PullStream();\n    this.sock.pipe(this.stream);\n\n    this.handleData();\n  }\n\n  disconnect() {\n    clearInterval(this.heartbeatId);\n    this.sock.end();\n  }\n\n  static connectNTR(ip, disconnectedCallback) {\n    return new Promise((resolve, reject) => {\n      let connected = false;\n      const client = new NtrClient({\n        ip,\n        connectedCallback: () => {\n          connected = true;\n          resolve(client);\n        },\n        disconnectedCallback: (...args) => {\n          if (!connected) {\n            reject(new Error('Connection could not be established.'));\n          }\n          if (typeof disconnectedCallback === 'function') {\n            disconnectedCallback(...args);\n          }\n        },\n      });\n    });\n  }\n\n  // Receiving stuff\n\n  async handleData() {\n    try {\n      const cmdBuf = await this.stream.pullAsync(84);\n\n      const magic = cmdBuf.readUInt32LE(0);\n      const seq = cmdBuf.readUInt32LE(4);\n      const cmd = cmdBuf.readUInt32LE(12);\n      const dataLen = cmdBuf.readUInt32LE(80);\n\n      if (magic !== 0x12345678) {\n        return;\n      }\n\n      if (dataLen !== 0) {\n        const data = await this.stream.pullAsync(dataLen);\n        this.handlePacket(cmd, seq, data);\n      } else {\n        this.handlePacket(cmd, seq, undefined);\n      }\n\n      if (this.connectedCallback) {\n        this.connectedCallback();\n        this.connectedCallback = undefined;\n      }\n\n      this.handleData();\n    } catch (e) {\n      this.disconnect();\n    }\n  }\n\n  handlePacket(cmd, seq, data) {\n    switch (cmd) {\n      case 0:\n        {\n          this.canSendHeartbeat = true;\n          if (this.promises[seq] === undefined) {\n            break;\n          }\n          const {\n            type,\n          } = this.promises[seq];\n          const lines = data !== undefined ? data.toString()\n            .match(/^.+$/gm) : [];\n          switch (type) {\n            case 'processes':\n              this.handleProcesses(seq, lines);\n              break;\n            case 'threads':\n              this.handleThreads(seq, lines);\n              break;\n            case 'memlayout':\n              this.handleMemlayout(seq, lines);\n              break;\n            case 'handle':\n              this.handleHandles(seq, lines);\n              break;\n            case 'hello':\n              this.handleHello(seq, lines);\n              break;\n            case 'memory':\n              this.handleReadMemoryText(seq, lines);\n              break;\n            default:\n              this.promises[seq].reject(new Error(\n                `No handler registered for ${type}.`));\n              break;\n          }\n          break;\n        }\n      case 9:\n        {\n          this.handleReadMemoryData(seq, data);\n          break;\n        }\n      default:\n        break;\n    }\n\n    if (this.promises[seq] !== undefined) {\n      delete this.promises[seq];\n    }\n  }\n\n  handleProcesses(seq, lines) {\n    const {\n      resolve,\n      reject,\n    } = this.promises[seq];\n    if (lines[lines.length - 1] !== 'end of process list.') {\n      reject(new Error('Unexpected reply for process list.'));\n      return;\n    }\n\n    const processes = lines.slice(0, -1);\n    try {\n      resolve(processes.map((proc) => {\n        const m = proc.match(\n          /^pid: 0x([\\da-f]{8}), pname: *([^,]+), tid: ([\\da-f]{16}), kpobj: ([\\da-f]{8})$/,\n        );\n\n        if (m === null) {\n          console.log(proc);\n          throw new Error(\n            'Response does not match expected format for process list.',\n          );\n        }\n\n        return {\n          pid: parseInt(m[1], 16),\n          name: m[2],\n          tid: parseInt(m[3], 16),\n          kpobj: parseInt(m[4], 16),\n        };\n      }));\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  handleThreads(seq, lines) {\n    const {\n      resolve,\n      reject,\n    } = this.promises[seq];\n    const res = {\n      threads: [],\n      recommendedPc: [],\n      recommendedLr: [],\n    };\n\n    try {\n      let i;\n      for (i = 0; lines[i].startsWith('tid: '); i += 3) {\n        const tid = parseInt(lines[i].match(/^tid: 0x([\\da-f]{8})$/)[1], 16);\n        const m = lines[i + 1].match(/^pc: ([\\da-f]{8}), lr: ([\\da-f]{8})$/);\n        if (Number.isNaN(tid)) {\n          throw new Error();\n        }\n        const pc = parseInt(m[1], 16);\n        const lr = parseInt(m[2], 16);\n        const data = lines[i + 2].split(' ');\n        const dataBuf = Buffer.alloc(128);\n        for (let j = 0; j < 32; ++j) {\n          const val = parseInt(data[j], 16);\n          if (Number.isNaN(val)) {\n            throw new Error();\n          }\n          dataBuf.writeUInt32LE(val, j * 4);\n        }\n        res.threads.push({\n          tid,\n          pc,\n          lr,\n          data: dataBuf,\n        });\n      }\n\n      if (lines[i++] !== 'recommend pc:') {\n        throw new Error();\n      }\n\n      for (;\n        /^[\\da-f]{8}$/.test(lines[i]); ++i) {\n        res.recommendedPc.push(parseInt(lines[i], 16));\n      }\n\n      if (lines[i++] !== 'recommend lr:') {\n        throw new Error();\n      }\n\n      for (;\n        /^[\\da-f]{8}$/.test(lines[i]); ++i) {\n        res.recommendedLr.push(parseInt(lines[i], 16));\n      }\n\n      if (i < lines.length) {\n        throw new Error();\n      }\n\n      resolve(res);\n    } catch (e) {\n      reject(new Error(\n        'Response does not match expected format for thread list.'));\n    }\n  }\n\n  handleMemlayout(seq, lines) {\n    const {\n      resolve,\n      reject,\n    } = this.promises[seq];\n    try {\n      if (lines[0] !== 'valid memregions:' || lines[lines.length - 1] !==\n        'end of memlayout.') {\n        throw new Error();\n      }\n\n      const regions = lines.slice(1, -1);\n      resolve(regions.map((region) => {\n        const m = region.match(\n          /^([\\da-f]{8}) - ([\\da-f]{8}) , size: ([\\da-f]{8})$/);\n        const start = parseInt(m[1], 16);\n        const end = parseInt(m[2], 16);\n        const size = parseInt(m[3], 16);\n\n        return {\n          start,\n          end,\n          size,\n        };\n      }));\n    } catch (e) {\n      reject(new Error(\n        'Response does not match expected format for memlayout.'));\n    }\n  }\n\n  handleHandles(seq, lines) {\n    const {\n      resolve,\n      reject,\n    } = this.promises[seq];\n    try {\n      if (lines[lines.length - 1] !== 'done') {\n        throw new Error();\n      }\n\n      const handles = lines.slice(0, -1);\n      resolve(handles.map((handle) => {\n        const m = handle.match(/^h: ([\\da-f]{8}), p: ([\\da-f]{8})$/);\n        const h = parseInt(m[1], 16);\n        const p = parseInt(m[2], 16);\n        return {\n          h,\n          p,\n        };\n      }));\n    } catch (e) {\n      reject(new Error('Response does not match expected format for handles.'));\n    }\n  }\n\n  handleHello(seq, lines) {\n    const {\n      resolve,\n      reject,\n    } = this.promises[seq];\n\n    if (lines.length === 1 && lines[0] === 'hello') {\n      resolve();\n    } else {\n      reject(new Error(`Unexpected reply to hello: ${lines.join('\\n')}`));\n    }\n  }\n\n  handleReadMemoryText(seq, lines) {\n    if (lines.length !== 1 || lines[0] !== 'finished') {\n      this.promises[seq].reject(new Error('Did not receive memory.'));\n    }\n  }\n\n  handleReadMemoryData(seq, data) {\n    if (this.promises[seq + 1000] === undefined) {\n      return;\n    }\n\n    const {\n      resolve,\n      reject,\n    } = this.promises[seq + 1000];\n\n    if (data === undefined) {\n      reject(new Error('Did not receive data.'));\n      return;\n    }\n\n    resolve(data);\n  }\n\n  // Sending stuff\n\n  sendPacket(type, cmd, args = [], dataLen) {\n    const buf = Buffer.alloc(84);\n    buf.writeUInt32LE(0x12345678, 0);\n    buf.writeUInt32LE(this.seqNumber, 4);\n    buf.writeUInt32LE(type, 8);\n    buf.writeUInt32LE(cmd, 12);\n    for (let i = 0; i < Math.min(16, args.length); ++i) {\n      buf.writeUInt32LE(args[i], 4 * (4 + i));\n    }\n    buf.writeUInt32LE(dataLen, 80);\n    this.sock.write(buf);\n\n    this.seqNumber += 1000;\n  }\n\n  saveFile(name, data) {\n    const nameBuffer = Buffer.alloc(200);\n    nameBuffer.write(name);\n    this.sendPacket(1, 1, undefined, 200 + data.byetLength);\n    this.sock.write(nameBuffer);\n    this.sock.write(data);\n  }\n\n  reload() {\n    this.sendPacket(0, 4, undefined, 0);\n  }\n\n  hello() {\n    this.sendPacket(0, 3, undefined, 0);\n    const seq = this.seqNumber;\n    return new Promise((resolve, reject) => {\n      this.promises[seq] = {\n        resolve,\n        reject,\n        type: 'hello',\n      };\n    });\n  }\n\n  heartbeat() {\n    if (this.canSendHeartbeat) {\n      this.canSendHeartbeat = false;\n      this.sendPacket(0, 0, undefined, 0);\n    }\n  }\n\n  writeMemory(addr, pid, buf) {\n    this.sendPacket(1, 10, [pid, addr, buf.byteLength], buf.byteLength);\n    this.sock.write(buf);\n  }\n\n  readMemory(addr, size, pid) {\n    this.sendPacket(0, 9, [pid, addr, size], 0);\n    const seq = this.seqNumber;\n    return new Promise((resolve, reject) => {\n      this.promises[seq] = {\n        resolve,\n        reject,\n        type: 'memory',\n      };\n    });\n  }\n\n  addBreakpoint(addr, type) {\n    if (type === 'always') {\n      this.sendPacket(0, 11, [1, addr, 1], 0);\n    } else if (type === 'once') {\n      this.sendPacket(0, 11, [2, addr, 1], 0);\n    }\n  }\n\n  disBreakpoint(id) { // TODO what does this do?\n    this.sendPacket(0, 11, [id, 0, 3], 0);\n  }\n\n  enaBreakpoint(id) { // TODO what does this do?\n    this.sendPacket(0, 11, [id, 0, 2], 0);\n  }\n\n  resume() {\n    this.sendPacket(0, 11, [0, 0, 4], 0);\n  }\n\n  listProcesses() {\n    this.sendPacket(0, 5, undefined, 0);\n    const seq = this.seqNumber;\n    return new Promise((resolve, reject) => {\n      this.promises[seq] = {\n        resolve,\n        reject,\n        type: 'processes',\n      };\n    });\n  }\n\n  listThreads(pid) {\n    this.sendPacket(0, 7, [pid], 0);\n    const seq = this.seqNumber;\n    return new Promise((resolve, reject) => {\n      this.promises[seq] = {\n        resolve,\n        reject,\n        type: 'threads',\n      };\n    });\n  }\n\n  attachToProcess(pid, patchAddr = 0) {\n    this.sendPacket(0, 6, [pid, patchAddr], 0);\n  }\n\n  queryHandle(pid) {\n    this.sendPacket(0, 12, [pid], 0);\n    const seq = this.seqNumber;\n    return new Promise((resolve, reject) => {\n      this.promises[seq] = {\n        resolve,\n        reject,\n        type: 'handle',\n      };\n    });\n  }\n\n  getMemlayout(pid) {\n    this.sendPacket(0, 8, [pid], 0);\n    const seq = this.seqNumber;\n    return new Promise((resolve, reject) => {\n      this.promises[seq] = {\n        resolve,\n        reject,\n        type: 'memlayout',\n      };\n    });\n  }\n}\n"]}