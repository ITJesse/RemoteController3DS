{"version":3,"sources":["../src/socket.js"],"names":["HOST","IP","PORT_NTR","PORT_UDP","touch","cpad","Socket","constructor","connected","type","ntr","ip","port","connectedCallback","console","log","disconnectedCallback","client","createSocket","on","err","close","buildSocketData","buttons","data","Buffer","send","writeMemory"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,MAAMA,OAAO,iBAAOC,EAApB;AACA,MAAMC,WAAW,IAAjB;AACA,MAAMC,WAAW,IAAjB;;AAEA,MAAMC,QAAQ,SAAd;AACA,MAAMC,OAAO,QAAb;;AAEe,MAAMC,MAAN,CAAa;AAC1BC,gBAAc;AACZ,SAAKC,SAAL,GAAiB,KAAjB;AACA,QAAI,iBAAOC,IAAP,KAAgB,KAApB,EAA2B;AACzB,WAAKC,GAAL,GAAW,wBAAc;AACvBC,YAAIX,IADmB;AAEvBY,cAAMV,QAFiB;AAGvBW,2BAAmB,MAAM;AACvB,eAAKL,SAAL,GAAiB,IAAjB;AACAM,kBAAQC,GAAR,CAAa,gBAAef,IAAK,IAAGE,QAAS,EAA7C;AACD,SANsB;AAOvBc,8BAAsB,MAAM;AAC1B,eAAKR,SAAL,GAAiB,KAAjB;AACAM,kBAAQC,GAAR,CAAa,mBAAkBf,IAAK,IAAGE,QAAS,EAAhD;AACD;AAVsB,OAAd,CAAX;AAYD,KAbD,MAaO;AACL,WAAKe,MAAL,GAAc,gBAAMC,YAAN,CAAmB,MAAnB,CAAd;AACA,WAAKV,SAAL,GAAiB,IAAjB;AACAM,cAAQC,GAAR,CAAa,sBAAqBf,IAAK,IAAGE,QAAS,EAAnD;AACA,WAAKe,MAAL,CAAYE,EAAZ,CAAe,OAAf,EAAyBC,GAAD,IAAS;AAC/BN,gBAAQC,GAAR,CAAYK,GAAZ;AACA,aAAKZ,SAAL,GAAiB,KAAjB;AACA,aAAKS,MAAL,CAAYI,KAAZ;AACD,OAJD;AAKD;AACF;;AAED,SAAOC,eAAP,CAAuBC,OAAvB,EAAgC;AAC9B,UAAMC,OAAO,EAAb;AACA;;AAEA;AACAA,SAAK,CAAL,IAAUD,UAAU,IAApB;AACAC,SAAK,CAAL,IAAWD,WAAW,IAAZ,GAAoB,IAA9B;AACAC,SAAK,CAAL,IAAWD,WAAW,IAAZ,GAAoB,IAA9B;AACAC,SAAK,CAAL,IAAWD,WAAW,IAAZ,GAAoB,IAA9B;;AAEAC,SAAK,CAAL,IAAUpB,QAAQ,IAAlB;AACAoB,SAAK,CAAL,IAAWpB,SAAS,IAAV,GAAkB,IAA5B;AACAoB,SAAK,CAAL,IAAWpB,SAAS,IAAV,GAAkB,IAA5B;AACAoB,SAAK,CAAL,IAAWpB,SAAS,IAAV,GAAkB,IAA5B;;AAEAoB,SAAK,CAAL,IAAUnB,OAAO,IAAjB;AACAmB,SAAK,CAAL,IAAWnB,QAAQ,IAAT,GAAiB,IAA3B;AACAmB,SAAK,EAAL,IAAYnB,QAAQ,IAAT,GAAiB,IAA5B;AACAmB,SAAK,EAAL,IAAYnB,QAAQ,IAAT,GAAiB,IAA5B;AACA;;AAEA,WAAO,IAAIoB,MAAJ,CAAWD,IAAX,CAAP;AACD;;AAEDE,OAAKH,OAAL,EAAc;AACZ,QAAI,KAAKf,SAAL,IAAkB,KAAKE,GAA3B,EAAgC;AAC9B,WAAKA,GAAL,CAASiB,WAAT,CAAqB,QAArB,EAA+B,EAA/B,EAAmC,IAAIF,MAAJ,CAAWnB,OAAOgB,eAAP,CAAuBC,OAAvB,CAAX,CAAnC;AACD,KAFD,MAEO,IAAI,KAAKN,MAAT,EAAiB;AACtB,WAAKA,MAAL,CAAYS,IAAZ,CAAiBpB,OAAOgB,eAAP,CAAuBC,OAAvB,CAAjB,EAAkDpB,QAAlD,EAA4DH,IAA5D,EAAmEoB,GAAD,IAAS;AACzE,YAAIA,GAAJ,EAAS;AACPN,kBAAQC,GAAR,CAAYK,GAAZ;AACD;AACF,OAJD;AAKD;AACF;AA9DyB;kBAAPd,M","file":"socket.js","sourcesContent":["import dgram from 'dgram';\n\nimport NtrClient from './ntrclient';\nimport config from './config';\n\nconst HOST = config.IP;\nconst PORT_NTR = 8000;\nconst PORT_UDP = 4950;\n\nconst touch = 0x2000000;\nconst cpad = 0x800800;\n\nexport default class Socket {\n  constructor() {\n    this.connected = false;\n    if (config.type === 'ntr') {\n      this.ntr = new NtrClient({\n        ip: HOST,\n        port: PORT_NTR,\n        connectedCallback: () => {\n          this.connected = true;\n          console.log(`Connected to ${HOST}:${PORT_NTR}`);\n        },\n        disconnectedCallback: () => {\n          this.connected = false;\n          console.log(`Disconnect from ${HOST}:${PORT_NTR}`);\n        },\n      });\n    } else {\n      this.client = dgram.createSocket('udp4');\n      this.connected = true;\n      console.log(`Start send data to ${HOST}:${PORT_NTR}`);\n      this.client.on('error', (err) => {\n        console.log(err);\n        this.connected = false;\n        this.client.close();\n      });\n    }\n  }\n\n  static buildSocketData(buttons) {\n    const data = [];\n    // console.log(buttons);\n\n    // Buttons\n    data[0] = buttons & 0xFF;\n    data[1] = (buttons >> 0x08) & 0xFF;\n    data[2] = (buttons >> 0x10) & 0xFF;\n    data[3] = (buttons >> 0x18) & 0xFF;\n\n    data[4] = touch & 0xFF;\n    data[5] = (touch >> 0x08) & 0xFF;\n    data[6] = (touch >> 0x10) & 0xFF;\n    data[7] = (touch >> 0x18) & 0xFF;\n\n    data[8] = cpad & 0xFF;\n    data[9] = (cpad >> 0x08) & 0xFF;\n    data[10] = (cpad >> 0x10) & 0xFF;\n    data[11] = (cpad >> 0x18) & 0xFF;\n    // console.log(data);\n\n    return new Buffer(data);\n  }\n\n  send(buttons) {\n    if (this.connected && this.ntr) {\n      this.ntr.writeMemory(0x10df20, 16, new Buffer(Socket.buildSocketData(buttons)));\n    } else if (this.client) {\n      this.client.send(Socket.buildSocketData(buttons), PORT_UDP, HOST, (err) => {\n        if (err) {\n          console.log(err);\n        }\n      });\n    }\n  }\n}\n"]}